generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id           Int      @id @default(autoincrement())
  fullName     String
  email        String   @unique
  status       Boolean
  phone        String
  latamId      String   @unique
  typeEmployee String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  country      Country
  roleId       Int
  role         Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id        Int          @id @default(autoincrement())
  jobRole   String
  country   Country
  area      String
  cc        String
  cphCode   String
  cph       Float
  currencyId  Int
  currency   Currency    @relation(fields: [currencyId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  employee  Employee[]
  project   Project[]
}

model User {
  id           Int      @id @default(autoincrement())
  fullNameUser String
  userName     String   @unique
  password     String
  rol          UserRole
  logUser      LogUser[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Tabla de registro de ingresos y salidas del sistema de cada usuario
model LogUser {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  loginTime    DateTime @default(now())  // Hora de ingreso
  logoutTime   DateTime? // Hora de salida, nullable (si el usuario a√∫n no ha salido, puede ser nula)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model ServiceCPH {
  id             Int       @id @default(autoincrement())
  nameServiceCph String
  costServiceCph Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  tecnologyId    Int
  tecnology      Tecnology @relation(fields: [tecnologyId], references: [id])
}

model ServicesCpa {
  id             Int       @id @default(autoincrement())
  nameServiceCpa String
  costServiceCpa Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  tecnologyId    Int
  tecnology      Tecnology @relation(fields: [tecnologyId], references: [id])
}

model TicketCpa {
  id          Int       @id @default(autoincrement())
  nameTicked  String
  costTicked  Float
  TecnologyId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tecnology   Tecnology @relation(fields: [TecnologyId], references: [id])
}

model Tecnology {
  id            Int           @id @default(autoincrement())
  nameTecnology String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  product       Product[]
  project       Project[]
  serviceCPH    ServiceCPH[]
  serviceCPA    ServicesCpa[]
  ticketCPA     TicketCpa[]
}

model Product {
  id                    Int       @id @default(autoincrement())
  productBrand          String
  productClassification String
  productModel          String
  tecnologyId           Int
  typeProduct           String
  tecnology             Tecnology @relation(fields: [tecnologyId], references: [id])
  project               Project[]
}

model Project {
  id           Int          @id @default(autoincrement())
  country      Country
  typeProject  String
  costTicked   Float
  currencyId Int
  currency    Currency    @relation(fields: [currencyId], references: [id])
  roleId       Int
  productId    Int
  clientId     Int
  client       Client      @relation(fields: [clientId], references: [id])
  service      Service[]
  tecnologyId  Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  products     Product      @relation(fields: [productId], references: [id])
  roles        Role         @relation(fields: [roleId], references: [id])
  tecnology    Tecnology    @relation(fields: [tecnologyId], references: [id])
}

model Service {
  id          Int          @id @default(autoincrement())
  nameService String
  status      Boolean
  projectId   Int?
  project     Project?     @relation(fields: [projectId], references: [id])
  subServices SubService[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SubService {
  id              Int              @id @default(autoincrement())
  nameSubService  String
  status          Boolean
  serviceId       Int
  service         Service          @relation(fields: [serviceId], references: [id])
  itemSubServices ItemSubService[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ItemSubService {
  id                 Int        @id @default(autoincrement())
  nameItemSubService String
  status             Boolean
  subServiceId       Int
  subService         SubService @relation(fields: [subServiceId], references: [id])
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

enum Country {
  Colombia
  Peru
  Chile
  Mexico
  Argentina
  Panama
  United_States
  Brasil
}

enum UserRole {
  admin
  user
}

model Currency {
  id        Int      @id @default(autoincrement())
  code      String
  name      String
  rate Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles  Role[]
  project Project[]
}

model Client {
  id           Int      @id @default(autoincrement())
  fullName     String
  email        String   @unique
  phone        String
  country      Country
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project[]
}