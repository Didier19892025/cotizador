generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Roles {
  id                   Int                   @id @default(autoincrement())
  jobRole              String
  country              Country
  area                 String
  cc                   String
  cphCode              String
  cph                  Float
  currency             CurrencyType
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  CompensationCurrency CompensationCurrency?
  Employee             Employee?
  Proyect               Proyect[]
}

model CompensationCurrency {
  id           Int      @id @default(autoincrement())
  ammoutFx     Float
  TypeCurrency String
  roleId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         Roles    @relation(fields: [roleId], references: [id])
}

model Users {
  id           Int      @id @default(autoincrement())
  fullNameUser String
  userName     String   @unique
  password     String
  rol          UserRole
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Employee {
  id           Int      @id @default(autoincrement())
  fullName     String
  email        String   @unique
  status       Boolean
  latamId      String   @unique
  typeEmployee String
  roleId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         Roles    @relation(fields: [roleId], references: [id])
  Proyect      Proyect[]
}

model ServicesCPH {
  id             Int       @id @default(autoincrement())
  nameServiceCph String
  costServiceCph Float
  TecnologyId    Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Tecnology      Tecnology @relation(fields: [TecnologyId], references: [id])

  @@index([TecnologyId], map: "ServicesCPH_TecnologyId_fkey")
}

model ServicesCpa {
  id             Int       @id @default(autoincrement())
  nameServiceCpa String
  costServiceCpa Float
  TecnologyId    Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Tecnology      Tecnology @relation(fields: [TecnologyId], references: [id])

  @@index([TecnologyId], map: "ServicesCpa_TecnologyId_fkey")
}

model TicketCpa {
  id          Int       @id @default(autoincrement())
  nameTicked  String
  costTicked  Float
  TecnologyId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Tecnology   Tecnology @relation(fields: [TecnologyId], references: [id])

  @@index([TecnologyId], map: "TicketCpa_TecnologyId_fkey")
}

model Tecnology {
  id            Int           @id @default(autoincrement())
  nameTecnology String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  ServicesCPH   ServicesCPH[]
  ServicesCPA   ServicesCpa[]
  TicketCPA     TicketCpa[]
  Products      Products[]
  Proyect       Proyect[]
}

enum Country {
  Colombia
  Peru
  Chile
  Mexico
  Argentina
  Uruguay
  Panama
  United_States
  Bolivia
  Brasil
  Ecuador
  Guatemala
  Honduras
  Nicaragua
  Puerto_Rico
  Saint_Lucia
  Venezuela
}

enum UserRole {
  admin
  user
}

enum CurrencyType {
  USD
  COP
  PEN
  CLP
  MXN
  ARS
  UYU
  PAB
  BRL
  EUR
  GTQ
  HNL
  NIO
  XDC
  VEF
}

model Products{
  id          Int           @id @default(autoincrement())
  TecnologyId Int
  Tecnology   Tecnology    @relation(fields: [TecnologyId], references: [id])
  TypeProduct   String    
  ProductBrand  String 
  ProductModel  String
  ProductClassification String
  Proyect Proyect[]
 }


model Proyect {
  id          Int           @id @default(autoincrement())
  RolesId     Int
  Roles Roles @relation(fields: [RolesId], references: [id])
  Country Country
  EmployeeId  Int
  Employee Employee @relation(fields: [EmployeeId], references: [id])
  TecnologyId Int
  Tecnology   Tecnology    @relation(fields: [TecnologyId], references: [id])
  ProductsId Int 
  Products Products @relation(fields: [ProductsId], references: [id])
  TypeProyect String
  CostTicked  Float
  CurrencyType CurrencyType
  ServiceEnum ServiceEnum
}


enum ServiceEnum {
  Planning 
  Desing 
  Implementation 
  Operation 
  Optimization
}