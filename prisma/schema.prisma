generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Roles {
  id                   Int                   @id @default(autoincrement())
  jobRole              String
  country              Country
  area                 String
  cc                   String
  cphCode              String
  cph                  Float
  currency             CurrencyType
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  CompensationCurrency CompensationCurrency?
  employee             Employee[]
}

model CompensationCurrency {
  id           Int      @id @default(autoincrement())
  ammoutFx     Float
  roleId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  typeCurrency String
  role         Roles    @relation(fields: [roleId], references: [id])
}

model Users {
  id           Int      @id @default(autoincrement())
  fullNameUser String
  userName     String   @unique
  password     String
  rol          UserRole
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Employee {
  id           Int        @id @default(autoincrement())
  fullName     String
  email        String     @unique
  status       Boolean
  latamId      String     @unique
  typeEmployee String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  roleId       Int        @unique
  role         Roles      @relation(fields: [roleId], references: [id])
  project      Projects[]
}

model ServicesCPH {
  id             Int       @id @default(autoincrement())
  nameServiceCph String
  costServiceCph Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  tecnologyId    Int
  tecnology      Tecnology @relation(fields: [tecnologyId], references: [id])

  @@index([tecnologyId], map: "ServicesCPH_tecnologyId_fkey")
}

model ServicesCpa {
  id             Int       @id @default(autoincrement())
  nameServiceCpa String
  costServiceCpa Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  tecnologyId    Int
  tecnology      Tecnology @relation(fields: [tecnologyId], references: [id])

  @@index([tecnologyId], map: "ServicesCpa_tecnologyId_fkey")
}

model TicketCpa {
  id          Int       @id @default(autoincrement())
  nameTicked  String
  costTicked  Float
  TecnologyId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tecnology   Tecnology @relation(fields: [TecnologyId], references: [id])

  @@index([TecnologyId], map: "TicketCpa_TecnologyId_fkey")
}

model Tecnology {
  id            Int           @id @default(autoincrement())
  nameTecnology String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      Products[]
  projects      Projects[]
  servicesCPH   ServicesCPH[]
  servicesCPA   ServicesCpa[]
  ticketCPA     TicketCpa[]
}

model Products {
  id                    Int        @id @default(autoincrement())
  productBrand          String
  productClassification String
  productModel          String
  tecnologyId           Int
  typeProduct           String
  tecnology             Tecnology  @relation(fields: [tecnologyId], references: [id])
  projects              Projects[]

  @@index([tecnologyId], map: "Products_tecnologyId_fkey")
}

model Projects {
  id           Int          @id @default(autoincrement())
  country      Country
  typeProject  String
  costTicked   Float
  currencyType CurrencyType
  serviceEnum  ServiceEnum
  employeeId   Int
  employee     Employee     @relation(fields: [employeeId], references: [id])
  productsId   Int
  products     Products     @relation(fields: [productsId], references: [id])
  tecnologyId  Int
  tecnology    Tecnology    @relation(fields: [tecnologyId], references: [id])

  @@index([employeeId], map: "Projects_employeeId_fkey")
  @@index([productsId], map: "Projects_productsId_fkey")
  @@index([tecnologyId], map: "Projects_tecnologyId_fkey")
}

enum Country {
  Colombia
  Peru
  Chile
  Mexico
  Argentina
  Uruguay
  Panama
  United_States
  Bolivia
  Brasil
  Ecuador
  Guatemala
  Honduras
  Nicaragua
  Puerto_Rico
  Saint_Lucia
  Venezuela
}

enum UserRole {
  admin
  user
}

enum CurrencyType {
  USD
  COP
  PEN
  CLP
  MXN
  ARS
  UYU
  PAB
  BRL
  EUR
  GTQ
  HNL
  NIO
  XDC
  VEF
}

enum ServiceEnum {
  Planning
  Desing
  Implementation
  Operation
  Optimization
}
